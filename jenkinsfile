pipeline {
    agent any

    environment {
        DOCKERHUB_NAMESPACE = "pavanimadhavarapu"
        IMAGE_NAME = "${DOCKERHUB_NAMESPACE}/html-self-page"
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKERHUB_CRED = "dockerhub-credentials-id"  // your Docker Hub credentials in Jenkins
        HOST_PORT = "8084"     // external port
        CONTAINER_PORT = "80"  // container port
        CONTAINER_NAME = "html-self-page"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/pavanimadhavarapu/project1.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CRED}", usernameVariable: "DOCKER_USER", passwordVariable: "DOCKER_PASS")]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${IMAGE_NAME}:latest
                    '''
                }
            }
        }

        stage('Run Container') {
            steps {
                sh """
                    # Stop any old container using the same name
                    docker rm -f ${CONTAINER_NAME} || true

                    # Stop any container currently using port 8084
                    existing=\$(docker ps -q --filter "publish=${HOST_PORT}")
                    if [ ! -z "\$existing" ]; then
                        docker rm -f \$existing
                    fi

                    # Run new container
                    docker run -d -p ${HOST_PORT}:${CONTAINER_PORT} --name ${CONTAINER_NAME} ${IMAGE_NAME}:${IMAGE_TAG}
                """
            }
        }
    }
}

